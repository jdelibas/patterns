{"version":3,"sources":["src/scale.js","src/main.js"],"names":["scaleLinear","domain","range","value","min","max","minDomain","newVal","module","exports","require","canvas","document","getElementById","ctx","getContext","a","Math","PI","r","grid","frameGrid","window","addEventListener","init","fpsInterval","startTime","now","then","elapsed","fps","stop","frameCount","startAnimating","performance","animate","newtime","requestAnimationFrame","animateGrid","offset","frame","length","console","log","drawGrid","height","innerHeight","width","innerWidth","getGridPoints","maxRadius","seed","randomIntFromInterval","seeder","radiusStep","y","sin","row","x","j","cos","push","center","points","getHexPoints","i","point","clearRect","column","hex","drawHex","drawCircle","beginPath","moveTo","lineTo","closePath","stroke","rad","arc","floor","random"],"mappings":"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","file":"main.8a7a17ab.js","sourceRoot":"..","sourcesContent":["const scaleLinear = ({ domain, range }) => (value) =>  {\n  const [min, max] = range\n  const [minDomain, maxDomain] = domain\n  const domainDiff = maxDomain - minDomain\n  const rangeDiff = max - min\n  const scale = domainDiff / rangeDiff\n  const newVal = minDomain + scale * (value - min)\n  if (newVal <= 0) return minDomain\n  return newVal\n}\n\nmodule.exports = {\n  scaleLinear,\n}\n","const { scaleLinear } = require('./scale')\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\nconst a = 2 * Math.PI / 6;\nconst r = 50;\n\nlet grid = []\nlet frameGrid = []\n\nwindow.addEventListener('resize', init);\nconst fps = 60;\nlet stop = false;\nlet frameCount = 0;\nlet fpsInterval, startTime, now, then, elapsed;\n\n\nfunction startAnimating(fps) {\n  fpsInterval = 1000 / fps;\n  then = window.performance.now();\n  startTime = then;\n  animate();\n}\nfunction animate(newtime) {\n  // stop\n  if (stop) {\n      return;\n  }\n  // request another frame\n  requestAnimationFrame(animate);\n  // calc elapsed time since last loop\n  now = newtime;\n  elapsed = now - then;\n  // if enough time has elapsed, draw the next frame\n  if (elapsed > fpsInterval) {\n      // Get ready for next frame by setting then=now, but...\n      // Also, adjust for fpsInterval not being multiple of 16.67\n      then = now - (elapsed % fpsInterval);\n      // draw stuff here\n      frameCount++;\n      animateGrid(frameCount)\n      if (frameCount >= fps) {\n        frameCount = 0;\n      }\n  }\n}\n\n\n\n\nconst offset = 1\nfunction animateGrid(frame) {\n  if (!grid.length) {\n    return\n  }\n  console.log(frame)\n\n  // frameGrid = []\n  drawGrid(grid, frame)\n}\n\nfunction init() {\n  const height = window.innerHeight\n  const width = window.innerWidth\n  canvas.width = width;\n  canvas.height = height;\n  console.log(width, height);\n  grid = getGridPoints(width, height);\n  drawGrid(grid)\n}\n\nconst maxRadius = 50\nconst seed = (min, max) => () => randomIntFromInterval(min, max)\nconst seeder = seed(1, fps)\n\nconst radiusStep = scaleLinear({ domain: [1, maxRadius], range: [1, 50 + fps] })\n\nfunction getGridPoints(width, height) {\n  const grid = []\n  for (let y = r; y + r * Math.sin(a) < height; y += r * Math.sin(a)) {\n    const row = []\n    for (let x = r, j = 0; x + r * (1 + Math.cos(a)) < width; x += r * (1 + Math.cos(a)), y += (-1) ** j++ * r * Math.sin(a)) {\n      row.push({\n        center: { x, y },\n        points: getHexPoints(x, y),\n        seed: seeder()\n      })\n    }\n    grid.push(row)\n  }\n  return grid;\n}\n\nfunction getHexPoints(x, y) {\n  const points = [];\n  // ctx.beginPath();\n  for (let i = 0; i < 6; i++) {\n    const point = {\n      x: x + r * Math.cos(a * i),\n      y: y + r * Math.sin(a * i)\n    }\n    points.push(point);\n  }\n  return points\n}\n\nfunction drawGrid(grid, frame = 0) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  for(const column of grid) {\n    for(const hex of column) {\n      drawHex(hex)\n      drawCircle(\n        hex.center.x,\n        hex.center.y,\n        radiusStep(hex.seed + frame)\n      )\n    }\n  }\n}\n\nfunction drawHex(hex) {\n  ctx.beginPath();\n  ctx.moveTo(hex.points[0].x, hex.points[0].y);\n  for (let i = 1; i < hex.points.length; i++) {\n    ctx.lineTo(hex.points[i].x, hex.points[i].y);\n  }\n  ctx.closePath();\n  ctx.stroke();\n}\n\nfunction drawCircle(x, y, rad) {\n  ctx.beginPath();\n  ctx.arc(x, y, rad, 0, 2 * Math.PI);\n  ctx.stroke();\n}\n\nfunction randomIntFromInterval(min, max) { // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\ninit();\nstartAnimating(fps)\n"]}